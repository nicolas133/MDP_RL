### MDP Value Iteration and Policy Iteration
### Reference: https://web.stanford.edu/class/cs234/assignment1/index.html 
import numpy as np
import gym
import sys
from gym.envs.registration import register

env = gym.make("FrozenLake-v0")
env = env.unwrapped

register(
    id='Deterministic-4x4-FrozenLake-v1',
    entry_point='gym.envs.toy_text.frozen_lake:FrozenLakeEnv',
    kwargs={'map_name': '4x4',
            'is_slippery': False})


def test_policy_evaluation(env):
    '''policy_evaluation (20 points)'''
    random_policy1 = np.ones([env.nS, env.nA]) / env.nA
    V1 = policy_evaluation(env.P,env.nS,env.nA, random_policy1,tol=1e-8)
    test_v1 = np.array([0.004, 0.004, 0.01 , 0.004, 0.007, 0. , 0.026, 0. , 0.019,
       0.058, 0.107, 0. , 0. , 0.13 , 0.391, 0. ])

    np.random.seed(595)
    random_policy2 = np.random.rand(env.nS, env.nA)
    random_policy2 = random_policy2/random_policy2.sum(axis=1)[:,None]
    V2 = policy_evaluation(env.P,env.nS,env.nA, random_policy2,tol=1e-8)
    test_v2 = np.array([0.007, 0.007, 0.017, 0.007, 0.01 , 0. , 0.043, 0. , 0.029,
       0.093, 0.174, 0. , 0. , 0.215, 0.504, 0. ])

    assert np.allclose(test_v1,V1,atol=1e-3)
    assert np.allclose(test_v2,V2,atol=1e-3)

"""
For policy_evaluation, policy_improvement, policy_iteration and value_iteration,
the parameters P, nS, nA, gamma are defined as follows:

	P: nested dictionary
		From gym.core.Environment
		For each pair of states in [1, nS] and actions in [1, nA], P[state][action] is a
		tuple of the form (probability, nextstate, reward, terminal) where
			- probability: float
				the probability of transitioning from "state" to "nextstate" with "action"
			- nextstate: int
				denotes the state we transition to (in range [0, nS - 1])
			- reward: int
				either 0 or 1, the reward for transitioning from "state" to
				"nextstate" with "action"
			- terminal: bool
			  True when "nextstate" is a terminal state (hole or goal), False otherwise
	nS: int
		number of states in the environment
	nA: int
		number of actions in the environment
	gamma: float
		Discount factor. Number in range [0, 1)
"""

def policy_evaluation(P, nS, nA, policy, gamma=0.9, tol=1e-8):
    """Evaluate the value function from a given policy.

    Parameters:
    ----------
    P, nS, nA, gamma:
        defined at beginning of file
    policy: np.array[nS,nA]
        The policy to evaluate. Maps states to actions.
    tol: float
        Terminate policy evaluation when
            max |value_function(s) - prev_value_function(s)| < tol
    Returns:
    -------
    value_function: np.ndarray[nS]
        The value function d=of the given policy, where value_function[s] is
        the value of state s
    """

    print('\nRUNNING POLICY EVAL FUNCTION\n')
    # creates an array of size all_states filled with zeroes
    value_function = np.zeros(nS)
    # set V_old to empty array
    V_old = np.copy(value_function)
    # initialize V_new
    V_new = V_old
    
    # v(pi) = Expected value taking policy pi [SUM(discounted Reward^t+k+1) given State t]
    # V_Expected = np.zeros(nS)'

    # declaring delta and V
    delta = 0
    V_value = 0
    # loop until delta exceeds threshold tol (instead of convering to âˆž)
    while delta < tol:
        print(nS)
        for s in range(nS):
            # summing results over all states and actions using the bellman equation
            for actions in range(nA):


                for probabilities, nextstate, reward, terminal in P[s][actions]:
                    # print(probabilities, nextstate, reward, terminal)
                    # bellman equation
                    print(P[s][actions])
                    print(type(probabilities))
                    print(type(reward))
                    print(V_new[0])
                    print(type(V_new[nextstate]))    
                    # V_value += P[s][actions] * probabilities * (reward + (gamma * V_new[nextstate]))
                    V_value += P[s][actions] * probabilities * (reward + (gamma * V_new[nextstate]))

                # compare old and new values
                delta = np.max(np.abs(V_old - V_new))

                # updating old array to hold new values
                V_old = V_new
                # replacing Sth value with new value
                V_new[s] = V_value

    return V_new



def main():
    print("Hello World!")
    test_policy_evaluation(env)

if __name__ == "__main__":
    main()




def policy_improvement(P, nS, nA, value_from_policy, gamma=0.9):
    """Given the value function from policy improve the policy.

    Parameters:
    -----------
    P, nS, nA, gamma:
        defined at beginning of file
    value_from_policy: np.ndarray
        The value calculated from the policy
    Returns:
    --------
    new_policy: np.ndarray[nS,nA]
        A 2D array of floats. Each float is the probability of the action
        to take in that state according to the environment dynamics and the 
        given value function.
    """

    new_policy = np.ones([nS, nA]) / nA
	############################
	# YOUR IMPLEMENTATION HERE #

    policyStable = True


	############################
    return new_policy


def policy_iteration(P, nS, nA, policy, gamma=0.9, tol=1e-8):
    """Runs policy iteration.

    You should call the policy_evaluation() and policy_improvement() methods to
    implement this method.

    Parameters
    ----------
    P, nS, nA, gamma:
        defined at beginning of file
    policy: policy to be updated
    tol: float
        tol parameter used in policy_evaluation()
    Returns:
    ----------
    new_policy: np.ndarray[nS,nA]
    V: np.ndarray[nS]
    """
    new_policy = policy.copy()
	############################
	# YOUR IMPLEMENTATION HERE #

	############################
    return new_policy, V

def value_iteration(P, nS, nA, V, gamma=0.9, tol=1e-8):
    """
    Learn value function and policy by using value iteration method for a given
    gamma and environment.

    Parameters:
    ----------
    P, nS, nA, gamma:
        defined at beginning of file
    V: value to be updated
    tol: float
        Terminate value iteration when
            max |value_function(s) - prev_value_function(s)| < tol
    Returns:
    ----------
    policy_new: np.ndarray[nS,nA]
    V_new: np.ndarray[nS]
    """
    
    V_new = V.copy()
    ############################
    # YOUR IMPLEMENTATION HERE #

    flag = True

    while flag:
        
        delta = 0

        for i in range(nS):
            V_old = 0

    ############################
    return policy_new, V_new

def render_single(env, policy, render = False, n_episodes=100):
    """
    Given a game envrionemnt of gym package, play multiple episodes of the game.
    An episode is over when the returned value for "done" = True.
    At each step, pick an action and collect the reward and new state from the game.

    Parameters:
    ----------
    env: gym.core.Environment
      Environment to play on. Must have nS, nA, and P as attributes.
    policy: np.array of shape [env.nS, env.nA]
      The action to take at a given state
    render: whether or not to render the game(it's slower to render the game)
    n_episodes: the number of episodes to play in the game. 
    Returns:
    ------
    total_rewards: the total number of rewards achieved in the game.
    """
    total_rewards = 0
    for _ in range(n_episodes):
        ob = env.reset() # initialize the episode
        done = False
        while not done:
            if render:
                env.render() # render the game
            ############################
            # YOUR IMPLEMENTATION HERE #
            
    return total_rewards





    # value iteration
    # while True:
    #     delta=0# change in expected value
    #     for s in range(nS):#iterate over all states
    #         V=0
    #         # original value arrray
    #         V_old = np.copy(V_Expected)

    #         for a in range(aS): #iterate over all the actions per state
    #             for probability, next_state, reward, done in P[s][a]: #iterate over all possible probs for the action ie account for slippery tiles
    #              V += policy[s][a] * prob*(reward+gama*V_Expected[next_state])
    #              # Calculate the expected return for this transition,
    #              # then add it to the total value of the current state-action pair
    #              #p(s',r|s,a),  probability of ending up in next state s' with reward r, given that the agent was in state s and took action a

    #         delta = max(delta, V_old[s] - V_Expected(s))
    #         V_Expected[s]= V #Update the array with current value


    #     if delta < tol: # ie value has converged dif is soo soo ssmall thus break out of loop as we found expected value for state action pair
    #         break


    #     return V_Expected
